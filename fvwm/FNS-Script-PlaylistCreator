#-----------------------------------------------------------------------
# File:		FNS-Script-PlaylistCreator
# Version:	1.0.1
# Licence: 	GPL 2
#
# Description:	Playlist creator script
#
# Parameters: 	
#
# Author:		Thomas Funk <t.funk@web.de>
#
# Created:	05/09/2013
# Changed:	08/02/2013
#-----------------------------------------------------------------------

UseGettext			{$FVWM_USERDIR/locale;fvwm-nightshade:$FNS_SYSTEMDIR/locale;fvwm-nightshade:+}
WindowTitle			{Playlist Creator V 1.0.1}
WindowSize 425 445		# Taille

Init
Begin
	Set $defaultFont = (GetOutput {echo $[infostore.used_font]} 1 -1)
	Set $BS_CMD = {|sed "s/\([()#|*&;:,'\` ]\)/\\\\\1/g"}
	Set $BT_CMD = {|sed "s/\`/\\\\\`/g"}
	Set $getPlaylistPath = {false}
	Set $PlaylistPath = {}
	Set $PlaylistPath_BS = {}
	Set $getStartDir = {false}
	Set $PWD = {}
	Set $PWD_BS = {}
	Set $PWD2 = {}
	Set $PWD2_BS = {}
	Set $clicks = 0
	Set $timeElapsed = 0
	Set $timeMsgElapsed = 0
	Set $PlaylistEntries = {}
	Set $PlaylistEntries_BT = {}
	Set $PlaylistEntriesFull = {}
	Set $chosenNewEntry = {}
	Set $chosenNewEntry_BT = {}
	Set $chosenNewEntryFull = {}
	Set $chosenPLEntry = {}
	Set $chosenPLEntry_BT = {}
	Set $chosenPLEntryFull = {}
	Set $addNewEntry = {false}
	Set $removePLEntry = {false}
	Set $changePlaylist = {false}
	Set $Cmd = {echo $HOME}$BS_CMD
	Set $lastStartDir = (GetOutput $Cmd 1 -1) {/}
	Set $Cmd = {echo $HOME}$BS_CMD
	Set $lastPLDir = (GetOutput $Cmd 1 -1) {/}
	Set $Playlist_changed = {false}
    Set $save_chosen = 0
    Set $close_click = 0
    Set $cleanupMsg = {false}

	Set $Font = {xft:}$defaultFont{:size=10}
	For $Widget=1 To 17 Do
		ChangeFont $Widget $Font
End

PeriodicTasks
Begin
	If $getPlaylistPath == {true} Then
	Begin
		Set $close_click = 0
		Set $Message = {false}
		Set $newPlaylistPath = (ReceivFromScript $id)
		If $newPlaylistPath <> {No message} Then
		Begin
			Set $PlaylistPath_BS = $newPlaylistPath
			
			# remember last chosen playlist directory
			Set $Cmd = {echo }$PlaylistPath_BS $BS_CMD{|xargs dirname}$BS_CMD
			Set $lastPLDir = (GetOutput $Cmd 1 -1)
			If $lastPLDir <> {/} Then
				Set $lastPLDir = $lastPLDir{/}
			
			Set $Cmd = {echo }$PlaylistPath_BS{ |sed 's/|/°/g'}
			Set $PlaylistPath = (GetOutput $Cmd 1 -1)
			ChangeTitle 2 $PlaylistPath
			Set $getPlaylistPath = {false}

			# check, whether playlist file exist
			Set $Cmd = {if [ -e }$PlaylistPath_BS{ ]; then echo 1; else echo 0; fi}
			Set $found_file = (GetOutput $Cmd 1 -1)

			If $found_file == {1} Then
			Begin
				If $PlaylistEntries == {} Then
					Set $PlaylistIsEmpty = {true}
				Else
					Set $PlaylistIsEmpty = {false}
					
				# remove all empty lines if any
				Do {Exec  sed -i '/^$/d' }$PlaylistPath_BS
				
				# fill different playlist string arrays
				# $PlaylistEntries: for playlist list box
				# $PlaylistEntries_BT: internal backspaced backtic entries
				# $PlaylistEntriesFull: internal backspaced full path entries array
				Set $Cmd = {cat }$PlaylistPath_BS{|wc -l}
				Set $lines = (GetOutput $Cmd 1 -1)
				For $i=1 To $lines Do
				Begin
					Set $Cmd = {cat }$PlaylistPath_BS{|sed '}$i{q;d'}$BS_CMD{|xargs basename |sed 's/|/°/g'}
					Set $chosenPLEntry = (GetOutput $Cmd 1 -1)
					Set $Cmd = {cat }$PlaylistPath_BS{|sed '}$i{q;d'}$BS_CMD{|xargs basename |sed 's/|/°/g'}$BT_CMD
					Set $chosenPLEntry_BT = (GetOutput $Cmd 1 -1)
					Set $Cmd = {cat }$PlaylistPath_BS{|sed '}$i{q;d'}$BS_CMD{|sed 's/\\|/°/g'}
					Set $chosenPLEntryFull = (GetOutput $Cmd 1 -1)
					If $PlaylistEntries == {} Then
					Begin
						Set $PlaylistEntries = $chosenPLEntry
						Set $PlaylistEntries_BT = $chosenPLEntry_BT
						Set $PlaylistEntriesFull = $chosenPLEntryFull
					End
					Else
					Begin
						Set $PlaylistEntries = $PlaylistEntries {|} $chosenPLEntry
						Set $PlaylistEntries_BT = $PlaylistEntries_BT {|} $chosenPLEntry_BT
						Set $PlaylistEntriesFull = $PlaylistEntriesFull {|} $chosenPLEntryFull
					End
				End
				
				#Do {echo PlaylistEntries_BT: }$PlaylistEntries_BT
				#Do {echo PlaylistEntriesFull: }$PlaylistEntriesFull
				ChangeTitle 13 $PlaylistEntries
				If $PlaylistIsEmpty == {false} Then
				Begin
					Set $msg = {Playlist appended to existing entries}
					ChangeLocaleTitle 16 $msg
					Set $Message = {true}
				End
				Set $chosenPLEntry = {}
				Set $chosenPLEntry_BT = {}
				Set $chosenPLEntryFull = {}
			End
		End
	End
	
	If $getStartDir == {true} Then
	Begin
		Set $close_click = 0
		Set $newStartDir = (ReceivFromScript $id)
		If $newStartDir <> {No message} Then
		Begin
			Set $PWD_BS = $newStartDir
			
			# change pipe chars in paths with ° because of problems 
			# inside of directory browser list box
			Set $Cmd = {echo }$PWD_BS{ |sed 's/|/°/g'}
			Set $PWD = (GetOutput $Cmd 1 -1)
			ChangeTitle 6 $PWD
			Set $getStartDir = {false}

			Set $POS=50
			Set $LOOP=1
			While $LOOP==1 Do
			Begin
				If (StrCopy $PWD_BS $POS $POS)=={/} Then
					Set $LOOP=0
				If $POS==0 Then
					Set $LOOP=0
				Set $POS=(Add $POS -1)
			End
			Set $PWD_BS=(StrCopy $PWD_BS 1 $POS)
			
			Set $CMD2={cd;cd } $PWD_BS {; pwd |sed 's/|/°/g'}
			Set $PWD=(GetOutput $CMD2 1 -1)
			
			Set $CMD2={cd;cd } $PWD_BS {; pwd}$BS_CMD
			Set $PWD_BS = (GetOutput $CMD2 1 -1)
			
			Set $PWD2 = $PWD
			Set $PWD2_BS = $PWD_BS
			
			Set $OPT={ }
			Set $CMD={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first |sed 's/|/°/g'}
			Set $LS=(GetOutput $CMD 1 -1)
			Set $ID=2
			While (GetOutput $CMD $ID -1) <> {} Do
			Begin
				Set $LS=$LS {|} (GetOutput $CMD $ID -1)
				Set $ID=(Add $ID 1)
			End
			ChangeTitle 8 $LS
			ChangeTitle 6 $PWD
			
			# remember last browsed directory
			Set $lastStartDir = $PWD_BS
			If $lastStartDir <> {/} Then
				Set $lastStartDir = $lastStartDir{/}

			Set $chosenNewEntry = {}
			Set $chosenNewEntry_BT = {}
			Set $chosenNewEntryFull = {}
			Set $chosenPLEntry = {}
			Set $chosenPLEntry_BT = {}
			Set $chosenPLEntryFull = {}
		End
	End

	If $changePlaylist == {true} Then
	Begin
		Set $Message = {false}
		Set $close_click = 0
		
		If $addNewEntry == {true} Then
		Begin
			If $PlaylistEntries == {} Then
			Begin
				Set $PlaylistEntries = $chosenNewEntry
				Set $PlaylistEntries_BT = $chosenNewEntry_BT
				Set $PlaylistEntriesFull = $chosenNewEntryFull
			End
			Else
			Begin
				Set $PlaylistEntries = $PlaylistEntries {|} $chosenNewEntry
				Set $PlaylistEntries_BT = $PlaylistEntries_BT {|} $chosenNewEntry_BT
				Set $PlaylistEntriesFull = $PlaylistEntriesFull {|} $chosenNewEntryFull
			End
			Set $addNewEntry = {false}
			
			ChangeTitle 13 $PlaylistEntries
			ChangeLocaleTitle 12 {Playlist*:}

			Set $str_t1 = (Gettext {Added '}) 
			Set $str_t2 = (Gettext {' to list}) 
			Set $msg = $str_t1 $chosenNewEntry $str_t2
			ChangeTitle 16 $msg
			Set $Message = {true}

			Set $chosenNewEntry = {}
			Set $chosenNewEntry_BT = {}
			Set $chosenNewEntryFull = {}
		End

		If $removePLEntry == {true} Then
		Begin
			If $PlaylistEntries <> {} Then
			Begin
				If $index == 1 Then
				Begin
					Set $Cmd = {echo "}$PlaylistEntriesFull{" |tr '|' '\n'|wc -l}
					Set $file_count = (GetOutput $Cmd 1 -1)
					If $file_count == 1 Then
					Begin
						Set $PlaylistEntries = {}
						Set $PlaylistEntries_BT = {}
						Set $PlaylistEntriesFull = {}
					End
					Else
					Begin
						Set $Cmd = {echo "}$PlaylistEntries_BT{" | sed -e "s/}$chosenPLEntry_BT{|//"|sed -e 's/\\//g'}
						Set $PlaylistEntries = (GetOutput $Cmd 1 -1)
						
						Set $Cmd = {echo "}$PlaylistEntries_BT{" | sed -e 's/}$chosenPLEntry{|//'}$BT_CMD
						Set $PlaylistEntries_BT_new = (GetOutput $Cmd 1 -1)
						If $PlaylistEntries_BT_new == {} Then
						Begin
							Set $Cmd = {echo "}$PlaylistEntries_BT{" | sed -e "s/}$chosenPLEntry{|//"}$BT_CMD
							Set $PlaylistEntries_BT = (GetOutput $Cmd 1 -1)
						End
						Else
							Set $PlaylistEntries_BT = $PlaylistEntries_BT_new
						
						Set $Cmd = {echo "}$PlaylistEntriesFull{" |sed -e 's/\\//g' | sed -e 's#}$chosenPLEntryFull{|##'}$BS_CMD{|sed -e 's/\\|/|/g'}
						Set $PlaylistEntriesFull_new = (GetOutput $Cmd 1 -1)
						If $PlaylistEntriesFull_new == {} Then
						Begin
							Set $Cmd = {echo "}$PlaylistEntriesFull{" |sed -e 's/\\//g' | sed -e "s#}$chosenPLEntryFull{|##"}$BS_CMD{|sed -e 's/\\|/|/g'}
							Set $PlaylistEntriesFull = (GetOutput $Cmd 1 -1)
						End
						Else
							Set $PlaylistEntriesFull = $PlaylistEntriesFull_new
					End
				End
				Else
				Begin
					Set $Cmd = {echo "}$PlaylistEntries_BT{" | sed -e "s/|}$chosenPLEntry_BT{//"|sed -e 's/\\//g'}
					Set $PlaylistEntries = (GetOutput $Cmd 1 -1)
					
					Set $Cmd = {echo "}$PlaylistEntries_BT{" | sed -e 's/|}$chosenPLEntry{//'}$BT_CMD
					Set $PlaylistEntries_BT_new = (GetOutput $Cmd 1 -1)
					If $PlaylistEntries_BT_new == {} Then
					Begin
						Set $Cmd = {echo "}$PlaylistEntries_BT{" | sed -e "s/|}$chosenPLEntry{//"}$BT_CMD
						Set $PlaylistEntries_BT = (GetOutput $Cmd 1 -1)
					End
					Else
						Set $PlaylistEntries_BT = $PlaylistEntries_BT_new
					
					Set $Cmd = {echo "}$PlaylistEntriesFull{" |sed -e 's/\\//g' | sed -e 's#|}$chosenPLEntryFull{##'}$BS_CMD{|sed -e 's/\\|/|/g'}
					Set $PlaylistEntriesFull_new = (GetOutput $Cmd 1 -1)
					If $PlaylistEntriesFull_new == {} Then
					Begin
						Set $Cmd = {echo "}$PlaylistEntriesFull{" |sed -e 's/\\//g' | sed -e "s#|}$chosenPLEntryFull{##"}$BS_CMD{|sed -e 's/\\|/|/g'}
						Set $PlaylistEntriesFull = (GetOutput $Cmd 1 -1)
					End
					Else
						Set $PlaylistEntriesFull = $PlaylistEntriesFull_new
				End

				ChangeTitle 13 $PlaylistEntries
				ChangeLocaleTitle 12 {Playlist*:}

				Set $str_t1 = (Gettext {Removed '}) 
				Set $str_t2 = (Gettext {' from list}) 
				Set $msg = $str_t1 $chosenPLEntry $str_t2
				ChangeTitle 16 $msg
				Set $Message = {true}
				
				Set $chosenPLEntry = {}
				Set $chosenPLEntry_BT = {}
				Set $chosenPLEntryFull = {}
			End
			Set $removePLEntry = {false}
		End
		Set $changePlaylist = {false}
		Set $Playlist_changed = {true}
	End

	If $Message == {true} Then
	Begin
		Set $cleanupMsg = {true}
		Set $timeMsgElapsed = 0
		Set $Message = {false}
	End
	
	Set $timeMsgElapsed = (Add $timeMsgElapsed 1)
	If (RemainderOfDiv $timeMsgElapsed 2) == 0 Then
	Begin
		If $cleanupMsg == {true} Then
			ChangeTitle 16 {}
		Set $timeMsgElapsed = 0
	End
End

# big rectangle
Widget 1
Property
	Type 		Rectangle
	Size 		405 370
	Position 	10 10
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
	End
End

# Textedit Playlist path
Widget 2
Property
	Type 		TextField
	LocaleTitle	{Playlist path to create}
	Size 		335 24
	Position 	20 21
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
	End
End

# Button 'Playlist path'
Widget 3
Property
	Type		PushButton
	LocaleTitle {...}
	Size		40 25
	Position	365 20
	Flags		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $Cmd = {FNS-FileBrowser }$lastPLDir{ -b -c}
		Set $id = (LaunchScript $Cmd)
		Set $getPlaylistPath = {true}
	End
End

# Text 'Sources'
Widget	4
Property
	Type		ItemDraw
	LocaleTitle {Sources:}
	Size		120 18
	Position	20 55
	Flags		NoFocus NoReliefString Left
Main
Case message of
	SingleClic :
	Begin
	End
End

# Up button
Widget 5
Property
	Type 		PushButton
	Title 		{Up}
	#Icon up.xpm
	Size 		40 25
	Position 	20 77
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		If $PWD_BS == {/} Then
		Begin
			Set $CMD={cd /; pwd}
			Set $PWD=(GetOutput $CMD 1 -1)
			Set $PWD_BS = $PWD
		End
		Else
		Begin
			Set $CMD={cd } $PWD_BS {/..; pwd}
			Set $PWD=(GetOutput $CMD 1 -1)
			Set $CMD={cd } $PWD_BS {/..; pwd}$BS_CMD
			Set $PWD_BS = (GetOutput $CMD 1 -1)
		End

		Set $CMD={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first |sed 's/|/°/g'}
		Set $LS=(GetOutput $CMD 1 -1)
		Set $ID=2
		While (GetOutput $CMD $ID -1) <> {} Do
		Begin
			Set $LS=$LS {|} (GetOutput $CMD $ID -1)
			Set $ID=(Add $ID 1)
		End
		ChangeTitle 8 $LS
		ChangeTitle 6 $PWD
		
		# update: remember last directory
		Set $lastStartDir = $PWD_BS
		If $lastStartDir <> {/} Then
			Set $lastStartDir = $lastStartDir{/}

		Set $chosenNewEntry = {}
		Set $chosenNewEntry_BT = {}
		Set $chosenNewEntryFull = {}
		Set $chosenPLEntry = {}
		Set $chosenPLEntry_BT = {}
		Set $chosenPLEntryFull = {}
	End
End

# Textedit path
Widget 6
Property
	Type 		TextField
	Title 		{Start directory to search}
	Size 		285 25
	Position 	70 78
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
	End
End

# Button 'Start path'
Widget 7
Property
	Type		PushButton
	LocaleTitle {...}
	Size		40 25
	Position	365 77
	Flags		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $Cmd = {FNS-FileBrowser }$lastStartDir{ -b -d}
		Set $id = (LaunchScript $Cmd)
		Set $getStartDir = {true}
	End
End

# Listbox directory content
Widget 8
Property
	Type 		List
	Title 		{}
	Size 		385 100
	Position 	20 110
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $CMD3={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first |sed 's/|/°/g'}
		If $PWD_BS == {/} Then
		Begin
			Set $PWD2=$PWD (GetOutput $CMD3 (GetValue 8) -1)
			Set $CMD={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first}$BS_CMD
			Set $PWD2_BS=$PWD_BS (GetOutput $CMD (GetValue 8) -1)
		End
		Else
		Begin
			Set $PWD2=$PWD {/} (GetOutput $CMD3 (GetValue 8) -1)
			Set $CMD={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first}$BS_CMD
			Set $PWD2_BS=$PWD_BS {/} (GetOutput $CMD (GetValue 8) -1)
		End

		Set $CMD2={cd } $PWD_BS {;cd } $PWD2_BS { 2>/dev/null; pwd |sed 's/|/°/g'}
		Set $PWD2=(GetOutput $CMD2 1 -1)

		Set $CMD2={cd } $PWD_BS {;cd } $PWD2_BS { 2>/dev/null; pwd}$BS_CMD
		Set $PWD2_BS = (GetOutput $CMD2 1 -1)

		If $PWD2_BS <> $PWD_BS Then
		Begin
			Set $PWD = $PWD2
			Set $PWD_BS = $PWD2_BS
			Set $CMD={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first |sed 's/|/°/g'}
			Set $LS=(GetOutput $CMD 1 -1)
			Set $ID=2
			While (GetOutput $CMD $ID -1) <> {} Do
			Begin
				Set $LS=$LS {|} (GetOutput $CMD $ID -1)
				Set $ID=(Add $ID 1)
			End
			ChangeTitle 8 $LS
			ChangeTitle 6 $PWD
			
			# update: remember last directory
			Set $lastStartDir = $PWD_BS
			If $lastStartDir <> {/} Then
				Set $lastStartDir = $lastStartDir{/}
				
			Set $chosenNewEntry = {}
			Set $chosenNewEntry_BT = {}
			Set $chosenNewEntryFull = {}
			Set $chosenPLEntry = {}
			Set $chosenPLEntry_BT = {}
			Set $chosenPLEntryFull = {}
		End
		Else
		Begin
			Set $chosenNewEntry = (GetOutput $CMD3 (GetValue 8) -1)
			Set $Cmd = {echo "}$chosenNewEntry{"}$BS_CMD
			Set $chosenNewEntry_BS = (GetOutput $Cmd 1 -1)
			If $chosenNewEntry_BS == {} Then
			Begin
				Set $Cmd = {echo '}$chosenNewEntry{'}$BS_CMD
				Set $chosenNewEntry_BS = (GetOutput $Cmd 1 -1)
				Set $Cmd = {echo '}$chosenNewEntry{'}$BT_CMD
				Set $chosenNewEntry_BT = (GetOutput $Cmd 1 -1)
			End
			Else
			Begin
				Set $Cmd = {echo "}$chosenNewEntry{"}$BT_CMD
				Set $chosenNewEntry_BT = (GetOutput $Cmd 1 -1)
			End

			If $PWD == {/} Then
				Set $chosenNewEntryFull = $PWD $chosenNewEntry_BS
			Else
			Begin
				Set $Cmd = {echo }$PWD_BS{ |sed 's/|/°/g'}$BS_CMD
				Set $PWD_BS_new = (GetOutput $Cmd 1 -1)
				Set $chosenNewEntryFull = $PWD_BS_new{/}$chosenNewEntry_BS
			End
		End
	End
End

# Checkbox 'hidden files'
Widget 9
Property
	Type 		CheckBox
	LocaleTitle { Show hidden files}
	Position 	20 215
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		If (GetValue 11) == 1 Then
			Set $OPT={ -A }
		Else
			Set $OPT={ }
		Set $CMD={cd } $PWD_BS {; ls} $OPT {-1 -pHL --group-directories-first |sed 's/|/°/g'}
		Set $LS=(GetOutput $CMD 1 -1)
		Set $ID=2
		While (GetOutput $CMD $ID -1) <> {} Do
		Begin
			Set $LS=$LS {|} (GetOutput $CMD $ID -1)
			Set $ID=(Add $ID 1)
		End
		ChangeTitle 8 $LS
		ChangeTitle 6 $PWD
		
		# update: remember last directory
		Set $lastStartDir = $PWD_BS
		If $lastStartDir <> {/} Then
			Set $lastStartDir = $lastStartDir{/}
		
		Set $chosenNewEntry = {}
		Set $chosenNewEntry_BT = {}
		Set $chosenNewEntryFull = {}
		Set $chosenPLEntry = {}
		Set $chosenPLEntry_BT = {}
		Set $chosenPLEntryFull = {}
	End
End

# Add button
Widget 10
Property
	Type 		PushButton
	LocaleTitle {Add}
	Size 		80 25
	Position 	225 228
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $Message = {false}
		If $chosenNewEntry == {} Then
		Begin
			ChangeLocaleTitle 16 {No file selected!}
			Set $Message = {true}
		End
		Else
		Begin
			Set $addNewEntry = {true}
			Set $changePlaylist = {true}
		End
	End
End

# Remove button
Widget 11
Property
	Type 		PushButton
	LocaleTitle {Remove}
	Size 		80 25
	Position 	320 228
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $Message = {false}
		If $chosenPLEntry == {} Then
		Begin
			ChangeLocaleTitle 16 {No file selected!}
			Set $Message = {true}
		End
		Else
		Begin
			Set $removePLEntry = {true}
			Set $changePlaylist = {true}
		End
	End
End

# Text 'Playlist'
Widget	12
Property
	Type		ItemDraw
	LocaleTitle {Playlist:}
	Size		80 18
	Position	20 250
	Flags		NoFocus NoReliefString Left
Main
Case message of
	SingleClic :
	Begin
	End
End

# Listbox Playlist content
Widget 13
Property
	Type 		List
	Title 		{}
	Size 		385 100
	Position 	20 270
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $index = (GetValue 13)
		
		Set $Cmd = {echo "}$PlaylistEntries_BT{" |cut -d'|' -f}$index{|sed -e 's/\\//g'}
		Set $chosenPLEntry = (GetOutput $Cmd 1 -1)

		Set $Cmd = {echo "}$PlaylistEntries_BT{" |cut -d'|' -f}$index $BT_CMD
		Set $chosenPLEntry_BT = (GetOutput $Cmd 1 -1)

		Set $Cmd = {echo "}$PlaylistEntriesFull{" |cut -d'|' -f}$index{|sed -e "s/\\\\'/'/"}
		Set $chosenPLEntryFull = (GetOutput $Cmd 1 -1)
	End
End

# Save button
Widget 14
Property
	Type 		PushButton
	Size 		80 25
	Position 	235 410
	LocaleTitle {Save}
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $close_click = 0
		Set $Message = {false}

		If $PlaylistPath == {} Then
		Begin
			ChangeLocaleTitle 16 {No playlist path set!}
			Set $Message = {true}
		End

		If $PlaylistEntries == {} Then
		Begin
			ChangeLocaleTitle 16 {No entries in playlist!}
			Set $Message = {true}
		End
		
		If $Message <> {true} Then
		Begin
			Set $Cmd = {echo "}$PlaylistEntriesFull{"| sed 's/|/\\\n/g'|sed 's/°/\\|/g'}$BT_CMD
			Set $ID=1
			While (GetOutput $Cmd $ID -1) <> {} Do
			Begin
				Set $tempStr = (GetOutput $Cmd $ID -1)
				If $ID == 1 Then
				Begin
					Do {Exec echo }(GetOutput $Cmd $ID -1){ > }$PlaylistPath_BS
				End
				Else
				Begin
					Do {Exec echo }(GetOutput $Cmd $ID -1){ >> }$PlaylistPath_BS
				End
				Set $ID=(Add $ID 1)
			End
			Set $Playlist_changed = {false}
			# delete space at the end of each line
			Do {Exec sed -i 's/[ \t]*$//' }$PlaylistPath_BS

			Set $str_t1 = (Gettext {Playlist '}) 
			Set $str_t2 = (Gettext {' saved}) 
			Set $msg = $str_t1 $PlaylistPath $str_t2
			ChangeTitle 16 $msg
			Set $Message = {true}
			
			ChangeLocaleTitle 12 {Playlist:}
		End
	End
End

# Cancel button
Widget 15
Property
	Type 		PushButton
	LocaleTitle {Cancel}
	Size 		80 25
	Position 	330 410
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $Message = {false}
		If $Playlist_changed == {true} Then
		Begin
			If $close_click == 0 Then
			Begin
				ChangeLocaleTitle 16 {!!! Changes not saved !!! Next click will quit.}
				Set $Message = {true}
				Set $close_click = 1
			End
			Else
			Begin
				Quit
			End
		End
		Else
		Begin
			Quit
		End
	End
End

# Label "Statusbar"
Widget	16
Property
    Type			ItemDraw
    Position		10 385
    Size 			405 20
    Title			{}
    Flags 			NoReliefString Left
End

# Clear button
Widget 17
Property
	Type 		PushButton
	LocaleTitle {Clear}
	Size 		80 25
	Position 	19 410
	Flags 		NoReliefString
Main
Case message of
	SingleClic :
	Begin
		Set $Message = {false}
		If $PlaylistEntries <> {} Then
		Begin
			Set $PlaylistEntries = {}
			Set $PlaylistEntries_BT = {}
			Set $PlaylistEntriesFull = {}
			ChangeTitle 13 $PlaylistEntries
			ChangeLocaleTitle 12 {Playlist*:}
			Set $Playlist_changed = {true}
			
			ChangeLocaleTitle 16 {Playlist cleared}
			Set $Message = {true}
		End
		Set $chosenNewEntry = {}
		Set $chosenNewEntryFull = {}
		Set $chosenPLEntry = {}
		Set $chosenPLEntryFull = {}
	End
End


