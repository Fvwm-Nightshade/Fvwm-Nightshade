#-----------------------------------------------------------------------
# File:         FNS-Applet-DriveInn
# Version:      1.0.3
# Licence:      GPL 2
#
# Description:  Storage drives manager applet based on FvwmScript
#
# Parameters:   -fns
#                  initiate applet that it will be used by Fvwm-Nightshade
#                   with another font, colorset and another icon directory.
#
#               -fnt
#                   set another font than the default one.
#
#               -cs
#                   set another colorset than the default one.
#
#               -hcs
#                   set another highlight colorset. If is not set default
#                   colorset is used.
#
#               -b
#                   set the used browser application. If is not set default
#                   application is pcmanfm
#
#               -t
#                   set another theme. Default is the theme set in 
#                   .FvwmForm-Desktop-Config. Fallback is builtin icon if 
#                   no icon found.
#
#               -exdev
#                   exclude devices as a comma separeted list
#
#               -exdir
#                   exclude directories as a comma separeted list
#
# Without parameters it starts with default settings from sebaro.
#
# Author:       sebaro    
# Adjusted by:  Thomas Funk <t.funk@web.de>
#
# Created:      08/16/2012
# Changed:      08/28/2013
#-----------------------------------------------------------------------

UseGettext      {$FVWM_USERDIR/locale;fvwm-nightshade:$FNS_SYSTEMDIR/locale;fvwm-nightshade:+}
WindowTitle     {Applet-DriveInn}
WindowSize      185 130

Init
Begin
    ##### Settings
    Set $browser = {pcmanfm}
    Set $refresh = {3}
    Set $excludeDirectories = {/,/boot,/usr,/tmp,/var}
    #Set $excludeDevices = {/dev/sda1,/dev/sda2}
    Set $excludeDevices = {}
    Set $Theme = {default}

    ##### Commandline Arguments
    Set $FnsUseApplet = {false}
    Set $ColorsetChanged = {false}
    Set $FontChanged = {false}
    Set $useThemeIcons = {false}
    Set $i = 1
    Set $arg = (GetScriptArgument $i)

    While $arg <> {} Do
    Begin
        Set $noValue = {false}
        Set $j = (Add $i 1)
        Set $value = (GetScriptArgument $j)

        # Fvwm-Nightshade use widget
        If $arg == {-fns} Then
        Begin
            Set $noValue = {true}
            Set $FnsUseApplet = {true}
            
            Set $defaultColorset = 25
            Set $ColorsetChanged = {true}
            
            Set $highlightColorset = 26
            
            If $FontChanged == {false} Then
            Begin
                Set $defaultFont = (GetOutput {echo $[infostore.used_font]} 1 -1)
                Set $FontChanged = {true}
            End
        End

        # other default colorset
        If $arg == {-cs} Then
        Begin
            Set $defaultColorset = $value
            Set $ColorsetChanged = {true}
        End

        # other highlight colorset
        If $arg == {-hcs} Then
            Set $highlightColorset = $value

        # other default font
        If $arg == {-fnt} Then
        Begin
            Set $defaultFont = $value
            Set $FontChanged = {true}
        End

        # other browser
        If $arg == {-b} Then
            Set $browser = $value

        # other default theme
        If $arg == {-t} Then
        Begin
            # current theme set in .FvwmForm-Desktop-Config
            Set $char = (StrCopy $value 1 1)
            If $char == {-} Then
                Set $noValue = {true}
            If $char == {} Then
                Set $noValue = {true}

            If $noValue == {false} Then
                Set $Theme = $value
            Set $useThemeIcons = {true}
        End

        # other exclude devices
        If $arg == {-exdev} Then
            Set $excludeDevices = $value

        # other exclude directories
        If $arg == {-exdir} Then
            Set $excludeDirectories = $value

        If $noValue == {true} Then
            Set $i = (Add $i 1)
        Else
            Set $i = (Add $i 2)
            
        Set $arg = (GetScriptArgument $i)
    End

    ##### change Global Styles if needed
    If $ColorsetChanged == {true} Then
    Begin
        Set $i = 1
        For $Widget=1 To 13 Do
        Begin
            If $FnsUseApplet == {true} Then
            Begin
                Set $res = (Div $i $Widget)
                If $res <> 0 Then
                Begin
                    If $Widget <> 13 Then
                        ChangeColorset $Widget $highlightColorset
                    Else
                        ChangeColorset $Widget $defaultColorset
                End
                Else
                Begin
                    Set $i = (Add $i 2)
                    ChangeColorset $Widget $defaultColorset
                End
            End
            Else
                ChangeColorset $Widget $defaultColorset
        End
        For $Widget=21 To 26 Do
        Begin
            If $FnsUseApplet == {true} Then
                ChangeColorset $Widget $highlightColorset
            Else
                ChangeColorset $Widget $defaultColorset
            HideWidget $Widget
        End

        ChangeColorset 0 $defaultColorset
    End

    ##### change Settings if needed
    If $FnsUseApplet == {true} Then
    Begin
        Set $quitButton = $homeDir {icons/quit.png}
    End
    Else
    Begin
        ChangeWindowTitle {DriveInn}
        Set $homeDir = (GetOutput {echo $[infostore.mScripts]} 1 -1) {/DriveInn/}
        Set $quitButton = $homeDir {icons/quit.png}
        
        Set $defaultColorset = 10
        Set $highlightColorset = 10
        Set $warnColorset = 12

        Set $defaultFont = {DejaVu Sans}
    End

    ##### change Widget Styles if needed
    If $FontChanged == {true} Then
    Begin
        Set $newFont = {xft:}$defaultFont{:size=7:bold}
        For $Widget=1 To 13 Do
            ChangeFont $Widget $newFont
        For $Widget=21 To 26 Do
            ChangeFont $Widget $newFont
    End

    ##### change Settings if needed
    ChangeIcon 13 $quitButton

    ##### Vaiables
    Set $toMount = {false}
    Set $toBrowse = {false}
    Set $toRefresh = {true}
    Set $clicks = 0
    Set $timeElapsed = 0
    Set $whichDrive = 0

    ##### Curly Brackets
    Set $leftCB = (GetOutput {printf "\173"} 1 -1)
    Set $rightCB = (GetOutput {printf "\175"} 1 -1)

    ##### Drive Filter
    Set $previousDrives = (GetOutput {echo $(udisks --dump | grep "has media" | sed -e "s/\s//g" -e "s/(.*//g" && udisks --dump | grep "is mounted" | sed -e "s/\s//g" -e "s/(.*//g")} 1 -1)
    Set $driveCounter = {ls /dev/disk/by-path | wc -l}
    Set $driveFilter = {for d in /dev/disk/by-path/*;do p=$} $leftCB {d#/dev/} $rightCB {;/sbin/udevadm info -q all -n $p | grep "DEVNAME\|DEVTYPE\|ID_TYPE\|ID_BUS" | sed -e "s/.*=//g";done}

    ##### Udev Version
    Set $udevVersion = (GetOutput {/sbin/udevadm --version} 1 -1)
End

PeriodicTasks
Begin
    ##### Check for one/double click(s)
    Set $timeElapsed = (Add $timeElapsed 1)
    If (RemainderOfDiv $timeElapsed 2) == 0 Then
    Begin
        If $clicks == 1 Then
        Begin
            #Do {echo one click}
            Set $toBrowse = {true}
        End
        If $clicks == 2 Then
        Begin
            #Do {echo two clicks}
            Set $toMount = {true}
        End
        Set $thisDrive = $whichDrive
        Set $timeElapsed = 0
        Set $clicks = 0
        Set $whichDrive = 0
    End

    ##### show full title
    If $showFullMountTitle == {true} Then
    Begin
        Set $titleWidget = (Add $Drive $Drive)
        Set $drivePath = (GetTitle $titleWidget)
        If $drivePath <> {} Then
        Begin
            Set $Mounted = {echo } $drivePath { | grep -q "^/dev" && echo 0 || echo 1}
            If (GetOutput $Mounted 1 -1) == 1 Then
            Begin
                Set $getDevName = {cat /etc/mtab | grep } $drivePath { | cut -d " " -f 1|sed -e "s#^/dev/##"}
                Set $DevName = (GetOutput $getDevName 1 -1)
                Set $showWidget = (Add $Drive 20)
                Set $hideWidget = (Add $titleWidget 2)
                If (Add $hideWidget (Mult $titleWidget -1)) == 2 Then
                Begin
                    If $hideWidget <> 8 Then
                    Begin
                        If $hideWidget <> 14 Then
                            HideWidget $hideWidget
                    End
                End
                Set $fullMountTitle = $drivePath{ }$DevName
                ChangeTitle $showWidget $fullMountTitle
                ShowWidget $showWidget
            End
        End
        Set $showFullMountTitle = {false}
    End
    
    ##### (Un)Mount Drives
    If $toMount == {true} Then
    Begin
        Set $iconWidget = (Add $thisDrive (Add $thisDrive -1))
        Set $titleWidget = (Add $thisDrive $thisDrive)
        Set $drivePath = (GetTitle $titleWidget)
        Set $notMounted = {echo } $drivePath { | grep -q "^/dev" && echo 1 || echo 0}
        If (GetOutput $notMounted 1 -1) == 1 Then
        Begin
            Set $notMountedCorrect = {grep -q "} $drivePath {" /etc/mtab && echo 1 || echo 0}
            If (GetOutput $notMountedCorrect 1 -1) <> 1 Then
            Begin
                Set $theMounting = {udisks --mount } $drivePath { && echo 1 || echo 0}
                If (GetOutput $theMounting 1 -1) == 1 Then
                Begin
                    Set $mSuccess = {true}
                    Set $driveMounted = 1
                    Set $getMountPath = {udisks --show-info } $drivePath { | grep "mount paths" | sed -e "s/\s//g" | cut -d ":" -f 2}
                    Set $putTitle = (GetOutput $getMountPath 1 -1)
                End
            End
            Else
                Set $toRefresh = {true}
        End
        Else
        Begin
            Set $mountedCorrect = {grep -q "} $drivePath {" /etc/mtab && echo 1 || echo 0}
            If (GetOutput $mountedCorrect 1 -1) == 1 Then
            Begin
                Set $getDevName = {cat /etc/mtab | grep } $drivePath { | cut -d " " -f 1}
                Set $drivePath = (GetOutput $getDevName 1 -1)
                Set $theUnmounting = {udisks --unmount } $drivePath { && echo 1 || echo 0}
                If (GetOutput $theUnmounting 1 -1) == 1 Then
                Begin
                    Set $mSuccess = {true}
                    Set $driveMounted = 0
                    Set $putTitle = $drivePath
                End
            End
            Else
                Set $toRefresh = {true}      
        End
        If $mSuccess == {true} Then
        Begin
            Set $getDriveInfo = {/sbin/udevadm info -q all -n } $drivePath { | grep "ID_TYPE\|ID_BUS" | sed -e "s/.*=//g"}
            If $udevVersion == {171} Then
            Begin
                Set $driveIDType = (GetOutput $getDriveInfo 1 -1)
                Set $driveIDBus = (GetOutput $getDriveInfo 2 -1)
            End
            Else
            Begin
                Set $driveIDType = (GetOutput $getDriveInfo 2 -1)
                Set $driveIDBus = (GetOutput $getDriveInfo 1 -1)
            End
            #Do {echo driveIDType: }$driveIDType
            #Do {echo driveIDBus: }$driveIDBus
            Set $fnsIcon = {}
            If $driveIDType == {cd} Then
            Begin
                Set $driveIcon = $homeDir {icons/} $driveIDType $driveMounted {.png}
                Set $fnsIcon = {drive-optical}
            End
            Else
            Begin
                Set $driveIcon = $homeDir {icons/} $driveIDBus $driveMounted {.png}
                If $driveIDType == {disk} Then
                    Set $fnsIcon = {drive-harddisk}
                If $driveIDBus == {mmc} Then
                    Set $fnsIcon = {media-flash}
                If $driveIDBus == {usb} Then
                    Set $fnsIcon = {drive-removable-media-usb}
                If $driveIDType == {floppy} Then
                    Set $fnsIcon = {media-floppy}
                If $fnsIcon == {} Then
                    Set $fnsIcon = {drive-removable-media}
            End
                
            If $useThemeIcons == {true} Then
            Begin
                If $Theme == {default} Then
                    Set $cmd = {fns-find-icon -n }$fnsIcon{ -s 32 -c devices --notdesk}
                Else
                    Set $cmd = {fns-find-icon -n }$fnsIcon{ -s 32 -t }$Theme{ -c devices --notdesk}
                Set $driveFnsIcon = (GetOutput $cmd 1 -1)
            End
            Else
                Set $driveFnsIcon = $fnsIcon{.svg:32x32}
            If $driveFnsIcon == {} Then
            Begin
                Set $cmd = {fns-find-icon -n }$fnsIcon{ -s 32 -t gnome -c devices --notdesk}
                Set $driveFnsIcon = (GetOutput $cmd 1 -1)
            End
            If $FnsUseApplet == {true} Then
                ChangeIcon $iconWidget $driveFnsIcon
            Else
                ChangeIcon $iconWidget $driveIcon
            If $driveMounted == 1 Then
            Begin
                ChangeColorset $iconWidget $defaultColorset
                ChangeColorset $titleWidget $highlightColorset
            End
            Else
            Begin
                ChangeColorset $iconWidget $highlightColorset
                ChangeColorset $titleWidget $defaultColorset
            End
            ChangeTitle $titleWidget $putTitle
            Set $mSuccess = {false}
        End
        Set $toMount = {false}
    End

    ##### Browse Drives
    If $toBrowse == {true} Then
    Begin
        Set $titleWidget = (Add $thisDrive $thisDrive)
        Set $thisTitle = (GetTitle $titleWidget)
        Set $notMounted = {echo } $thisTitle { | grep -q "^/dev" && echo 1 || echo 0}
        If (GetOutput $notMounted 1 -1) <> 1 Then
        Begin
            Set $mountedCorrect = {grep -q "} $thisTitle {" /etc/mtab && echo 1 || echo 0}
            If (GetOutput $mountedCorrect 1 -1) == 1 Then
                Do {exec } $browser { } $thisTitle
            Else
                Set $toRefresh = {true}
        End
        Else
        Begin
            Set $getDriveInfo = {/sbin/udevadm info -q all -n } $thisTitle { | grep "ID_TYPE\|ID_BUS" | sed -e "s/.*=//g"}
            If $udevVersion == {171} Then
                Set $driveIDType = (GetOutput $getDriveInfo 1 -1)
            Else
                Set $driveIDType = (GetOutput $getDriveInfo 2 -1)
            If $driveIDType == {cd} Then
            Begin
                Set $cmd = {which eject}
                Set $ejectPath = (GetOutput $cmd 1 -1)
                If $ejectPath <> {} Then
                    Do {exec }$ejectPath{ }$thisTitle
            End
        End
        Set $toBrowse = {false}
    End

    ##### Get & Show Drives
    If $toRefresh == {true} Then
    Begin
        #Do {echo ---- Get & Show Drives ----- }
        Set $driveID = 1
        Set $driveIcon = 1
        Set $driveTitle = 2
        Set $infoPos = 1
        Set $driveNum = (GetOutput $driveCounter 1 -1)
        For $drivePos = 1 To $driveNum Do
        Begin
            If $driveID < 7 Then
            Begin
                Set $driveDevName = (GetOutput $driveFilter $infoPos -1)
                #Do {echo driveDevName: }$driveDevName
                Set $driveDevType = (GetOutput $driveFilter (Add $infoPos 1) -1)
                #Do {echo driveDevType: }$driveDevType
                If $udevVersion == {171} Then
                Begin
                    Set $driveIDType = (GetOutput $driveFilter (Add $infoPos 2) -1)
                    Set $driveIDBus = (GetOutput $driveFilter (Add $infoPos 3) -1)
                End
                Else
                Begin
                    Set $driveIDType = (GetOutput $driveFilter (Add $infoPos 3) -1)
                    Set $driveIDBus = (GetOutput $driveFilter (Add $infoPos 2) -1)
                End
                
                #Do {echo driveIDType: }$driveIDType
                #Do {echo driveIDBus: }$driveIDBus
                If $driveDevType <> $driveIDType Then
                Begin
                    Set $getHasMedia = {udisks --show-info } $driveDevName { | grep "has media" | sed -e "s/\s//g" | cut -d ":" -f 2}
                    Set $hasMedia = (GetOutput $getHasMedia 1 -1)
                    Set $getIsExtSwap = {udisks --show-info } $driveDevName { | grep "type" | sed -e "s/\s//g" | cut -d ":" -f 2 | grep -q "0x05\|0x82" && echo 1 || echo 0}
                    Set $isExtSwap = (GetOutput $getIsExtSwap 1 -1)
                    Set $driveTypeOK = {true}
                    If $hasMedia == 0 Then
                        Set $driveTypeOK = {false}
                    If $isExtSwap == 1 Then
                        Set $driveTypeOK = {false}
                    If $excludeDevices <> {} Then
                    Begin
                        Set $matchDevs = {echo } $excludeDevices { | sed -e "s/,\s\+/,/g" -e "s/\\/,/^\\/$,/g" -e "s/,/\\\|^/g"}
                        Set $excludeDevs = (GetOutput $matchDevs 1 -1)
                        Set $devicePathNo = {echo } $driveDevName { | grep -q "} $excludeDevs {" && echo 1 || echo 0}
                        If (GetOutput $devicePathNo 1 -1) <> 0 Then
                            Set $driveTypeOK = {false}
                    End
                    #Do {echo driveTypeOK: }$driveTypeOK
                    If $driveTypeOK == {true} Then
                    Begin
                        Set $getIsMounted = {udisks --show-info } $driveDevName { | grep "is mounted" | sed -e "s/\s//g" | cut -d ":" -f 2}
                        Set $isMounted = (GetOutput $getIsMounted 1 -1)
                        Set $getMountPath = {udisks --show-info } $driveDevName { | grep "mount paths" | sed -e "s/\s//g" | cut -d ":" -f 2}
                        Set $mountPath = (GetOutput $getMountPath 1 -1)
                        If $excludeDirectories <> {} Then
                        Begin
                            Set $matchPaths = {echo } $excludeDirectories { | sed -e "s/,\s\+/,/g" -e "s/\\/,/^\\/$,/g" -e "s/,/\\\|^/g"}
                            Set $excludePaths = (GetOutput $matchPaths 1 -1)
                            Set $mountPathNo = {echo } $mountPath { | grep -q "} $excludePaths {" && echo 1 || echo 0}
                            Set $excludedPath = (GetOutput $mountPathNo 1 -1)
                        End
                        Else
                            Set $excludedPath = 0
                        If $excludedPath <> 1 Then
                        Begin
                            Set $fnsIcon = {}
                            If $driveIDType == {cd} Then
                            Begin
                                Set $driveIconThis = $homeDir {icons/} $driveIDType $isMounted {.png}
                                Set $fnsIcon = {drive-optical}
                            End
                            Else
                            Begin
                                Set $driveIconThis = $homeDir {icons/} $driveIDBus $isMounted {.png}
                                If $driveIDType == {disk} Then
                                    Set $fnsIcon = {drive-harddisk}
                                If $driveIDBus == {mmc} Then
                                    Set $fnsIcon = {media-flash}
                                If $driveIDBus == {usb} Then
                                    Set $fnsIcon = {drive-removable-media-usb}
                                If $driveIDType == {floppy} Then
                                    Set $fnsIcon = {media-floppy}
                                If $fnsIcon == {} Then
                                    Set $fnsIcon = {drive-removable-media}
                            End

                            If $isMounted == 1 Then
                            Begin
                                Set $driveTitleThis = $mountPath
                                ChangeColorset $driveTitle $highlightColorset
                                ChangeColorset $driveIcon $defaultColorset
                            End
                            Else
                            Begin
                                Set $driveTitleThis = $driveDevName
                                ChangeColorset $driveTitle $defaultColorset
                                ChangeColorset $driveIcon $highlightColorset
                            End
                            Set $driveTitleNow = (GetTitle $driveTitle)
                            If $driveTitleNow <> $driveTitleThis Then
                            Begin
                                If $Theme == {default} Then
                                    Set $themeParam = {}
                                Else
                                    Set $themeParam = { -t }$Theme
                                If $useThemeIcons == {true} Then
                                Begin
                                    Set $cmd = {fns-find-icon -n }$fnsIcon{ -s 32}$themeParam{ -c devices --notdesk}
                                    Set $driveFnsIconThis = (GetOutput $cmd 1 -1)
                                End
                                Else
                                    Set $driveFnsIconThis = $fnsIcon{.svg:32x32}

                                If $driveFnsIconThis == {} Then
                                Begin
                                    Set $cmd = {fns-find-icon -n }$fnsIcon{ -s 32 -t gnome -c devices --notdesk}
                                    Set $driveFnsIconThis = (GetOutput $cmd 1 -1)
                                End
                                If $FnsUseApplet == {true} Then
                                    ChangeIcon $driveIcon $driveFnsIconThis
                                Else
                                    ChangeIcon $driveIcon $driveIconThis
                                ChangeTitle $driveTitle $driveTitleThis
                            End
                            Set $driveID = (Add $driveID 1)
                            Set $driveIcon = (Add $driveIcon 2)
                            Set $driveTitle = (Add $driveTitle 2)
                        End
                    End
                End
            End
            Set $infoPos = (Add $infoPos 4)
        End

        ### Remove Drives With No Media
        #Do {echo ---- Remove Drives With No Media ----- }
        For $driveDrop = $driveID To 6 Do
        Begin
            ChangeIcon $driveIcon $noIcon
            ChangeTitle $driveTitle {}
            Set $driveID = (Add $driveID 1)
            Set $driveIcon = (Add $driveIcon 2)
            Set $driveTitle = (Add $driveTitle 2)
        End
        Set $toRefresh = {false}
    End

    ##### Check For New Drives
    If (RemainderOfDiv (GetTime) $refresh) == 0 Then
    Begin
        #Do {echo ---- Check For New Drives ----- }
        Set $currentDrives = (GetOutput {echo $(udisks --dump | grep "has media" | sed -e "s/\s//g" -e "s/(.*//g" && udisks --dump | grep "is mounted" | sed -e "s/\s//g" -e "s/(.*//g")} 1 -1)
        If $currentDrives <> $previousDrives Then
            Set $toRefresh = {true}
        Set $previousDrives = $currentDrives
    End
End

# Mountpoint 1
Widget 1
Property
    Type        ItemDraw
    Size        32 32
    Position    13 10
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Set $whichDrive = 1
        Set $clicks = (Add $clicks 1)
        If $clicks == 1 Then
            Set $timeElapsed = 0
    End
End

# Text mountpoint/device drive 1
Widget 2
Property
    Type        ItemDraw
    Size        58 15
    Position    2 47
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        Set $Drive = 1
        Set $showFullMountTitle = {true}
    End
End

# Text full mountpoint + device drive 1
Widget 21
Property
    Type        ItemDraw
    Size        150 15
    Position    2 47
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        HideWidget 21
        ShowWidget 4
    End
End

# Mountpoint 2
Widget 3
Property
    Type        ItemDraw
    Size        32 32
    Position    73 10
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Set $whichDrive = 2
        Set $clicks = (Add $clicks 1)
        If $clicks == 1 Then
            Set $timeElapsed = 0
    End
End

# Text mountpoint/device drive 2
Widget 4
Property
    Type        ItemDraw
    Size        58 15
    Position    63 47
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        Set $Drive = 2
        Set $showFullMountTitle = {true}
    End
End

# Text full mountpoint + device drive 2
Widget 22
Property
    Type        ItemDraw
    Size        150 15
    Position    18 47
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        HideWidget 22
        ShowWidget 6
    End
End

# Mountpoint 3
Widget 5
Property
    Type        ItemDraw
    Size        32 32
    Position    133 10
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Set $whichDrive = 3
        Set $clicks = (Add $clicks 1)
        If $clicks == 1 Then
            Set $timeElapsed = 0
    End
End

# Text mountpoint/device drive 3
Widget 6
Property
    Type        ItemDraw
    Size        58 15
    Position    124 47
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        Set $Drive = 3
        Set $showFullMountTitle = {true}
    End
End

# Text full mountpoint + device drive 3
Widget 23
Property
    Type        ItemDraw
    Size        150 15
    Position    32 47
    Flags       NoFocus NoReliefString Right
Main
Case message of
    SingleClic :
    Begin
        HideWidget 23
    End
End

# Mountpoint 4
Widget 7
Property
    Type        ItemDraw
    Size        32 32
    Position    13 70
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Set $whichDrive = 4
        Set $clicks = (Add $clicks 1)
        If $clicks == 1 Then
            Set $timeElapsed = 0
    End
End

# Text mountpoint/device drive 4
Widget 8
Property
    Type        ItemDraw
    Size        58 15
    Position    2 107
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        Set $Drive = 4
        Set $showFullMountTitle = {true}
    End
End

# Text full mountpoint + device drive 4
Widget 24
Property
    Type        ItemDraw
    Size        150 15
    Position    2 107
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        HideWidget 24
        ShowWidget 10
    End
End

# Mountpoint 5
Widget 9
Property
    Type        ItemDraw
    Size        32 32
    Position    73 70
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Set $whichDrive = 5
        Set $clicks = (Add $clicks 1)
        If $clicks == 1 Then
            Set $timeElapsed = 0
    End
End

# Text mountpoint/device drive 5
Widget 10
Property
    Type        ItemDraw
    Size        58 15
    Position    63 107
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        Set $Drive = 5
        Set $showFullMountTitle = {true}
    End
End

# Text full mountpoint + device drive 5
Widget 25
Property
    Type        ItemDraw
    Size        150 15
    Position    18 107
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        HideWidget 25
        ShowWidget 12
    End
End

# Mountpoint 6
Widget 11
Property
    Type        ItemDraw
    Size        32 32
    Position    133 70
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Set $whichDrive = 6
        Set $clicks = (Add $clicks 1)
        If $clicks == 1 Then
            Set $timeElapsed = 0
    End
End

# Text mountpoint/device drive 6
Widget 12
Property
    Type        ItemDraw
    Size        58 15
    Position    124 107
    Flags       NoFocus NoReliefString Left
Main
Case message of
    SingleClic :
    Begin
        Set $Drive = 6
        Set $showFullMountTitle = {true}
    End
End

# Text full mountpoint + device drive 6
Widget 26
Property
    Type        ItemDraw
    Size        150 15
    Position    32 107
    Flags       NoFocus NoReliefString Right
Main
Case message of
    SingleClic :
    Begin
        HideWidget 26
    End
End

# Close button
Widget        13
Property
    Type        ItemDraw
    Size        16 16
    Position    168 1
    Flags       NoFocus NoReliefString
Main
Case message of
    SingleClic :
    Begin
        Quit
    End
End
